---
  AWSTemplateFormatVersion: 2010-09-09
  Description:  This template deploys a  VPC, with a pair of public and private subnets spread across two Availability Zones and Public facing Aurora postgresDB.
  
  Parameters:
    EnvironmentName:
      Default: Production    
      Description: An environment name that is prefixed to resource names
      Type: String

    VpcCIDR:
      Description: Please enter the IP range (CIDR notation) for this VPC
      Type: String
      Default: 10.192.0.0/16

    PublicSubnet1CIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
      Type: String
      Default: 10.192.10.0/24

    PublicSubnet2CIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
      Type: String
      Default: 10.192.11.0/24

    PrivateSubnet1CIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
      Type: String
      Default: 10.192.20.0/24

    PrivateSubnet2CIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
      Type: String
      Default: 10.192.21.0/24
        
    DBUser:
      Default: postgres
      Description: The database admin account username
      Type: String
      MinLength: 1
      MaxLength: 16
    
    DBPassword:
      Default: Redhat123
      NoEcho: true
      Description: The database admin account password
      Type: String
      MinLength: 1
      MaxLength: 40  

  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:        
        VpcId:
           Ref: VPC
        InternetGatewayId:
           Ref: InternetGateway
        

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: !Ref PublicSubnet1CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs  '' ]
        CidrBlock: !Ref PublicSubnet2CIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs  '' ]
        CidrBlock: !Ref PrivateSubnet1CIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs  '' ]
        CidrBlock: !Ref PrivateSubnet2CIDR
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2


    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Private Routes (AZ1)


    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRouteTable1
        SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Private Routes (AZ2)

 

    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRouteTable2
        SubnetId: !Ref PrivateSubnet2

        
    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable Postgres access via port 5432
        VpcId:
          Ref: VPC
        SecurityGroupIngress:        
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        Tags:
        - Key: Name
          Value: AuroraDB
          
    
    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties: 
        DBSubnetGroupDescription: !Sub ${AWS::StackName}-rds-subnet-group
        SubnetIds: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} subnet-group
          
    RDSCluster:
       Type: AWS::RDS::DBCluster
       Properties:
          MasterUsername: !Ref DBUser
          MasterUserPassword: !Ref DBPassword
          Engine: "aurora-postgresql"
          EngineVersion: "11.12"
          Port: 5432
          DBSubnetGroupName: !Ref DBSubnetGroup
          VpcSecurityGroupIds: 
          - !Ref InstanceSecurityGroup          
          Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} AuroraDB
       DeletionPolicy: "Snapshot"    
    RDSDBInstance1:
      Type: "AWS::RDS::DBInstance"
      Properties:
          DBSubnetGroupName: !Ref DBSubnetGroup
          Engine: "aurora-postgresql"
          DBClusterIdentifier: !Ref RDSCluster                      
          DBInstanceClass: db.t3.medium
          PubliclyAccessible: true
          Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} AuroraDB 

  Outputs:
    VPC:
      Description: A reference to the created VPC
      Value: !Ref VPC

    PublicSubnets:
      Description: A list of the public subnets
      Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

    PrivateSubnets:
      Description: A list of the private subnets
      Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

    PublicSubnet1:
      Description: A reference to the public subnet in the 1st Availability Zone
      Value: !Ref PublicSubnet1

    PublicSubnet2:
      Description: A reference to the public subnet in the 2nd Availability Zone
      Value: !Ref PublicSubnet2

    PrivateSubnet1:
      Description: A reference to the private subnet in the 1st Availability Zone
      Value: !Ref PrivateSubnet1

    PrivateSubnet2:
      Description: A reference to the private subnet in the 2nd Availability Zone
      Value: !Ref PrivateSubnet2

    InstanceSecurityGroup:
      Description: Enable Postgres access via port 5432
      Value: !Ref InstanceSecurityGroup
      
    MasterRDSEndpoint:
      Description: RDS Endpoint address
      Value: !GetAtt [RDSCluster, Endpoint.Address] 
